{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template for WordPress in a VPC using Chef",


  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
   },
    "AdminPass": {
      "Description": "Wordpress Admin Password",
      "Type": "String",
      "Default": "admin",
      "ConstraintDescription": "must be a Password string"
   },

    "EnvironmentSizeEC2" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues": [
         "t2.small",
         "t2.medium"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
   },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
   },

    "EnvironmentSizeDB" : {
      "Description" : "Database instance class",
      "Type" : "String",
      "Default" : "db.t2.small",
      "AllowedValues": [
         "db.t2.small",
         "db.t2.medium"
      ],
      "ConstraintDescription" : "must select a valid database instance type."
   },

    "DBName" : {
      "Default": "wordpressdb",
      "Description" : "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
   },

    "DBUser" : {
      "NoEcho": "true",
      "Description" : "The WordPress database username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
   },

    "DBPassword" : {
      "NoEcho": "true",
      "Description" : "The WordPress database password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "ConstraintDescription" : "must contain only alphanumeric characters."
   },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (GB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "10",
      "ConstraintDescription" : "must be between 5 and 10 GB."
   },

    "Hostname": {
      "Description": "Database Endpoint",
      "Type": "String",
      "Default": "localhost",
      "ConstraintDescription": "Endpoint of the MYSQL DB"
   },

    "DBPort": {
      "Description": "Database Endpoint Port",
      "Type": "String",
      "Default": "3306",
      "ConstraintDescription": "Endpoint port for MYSQL DB"
   }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1"        : { "Amalinux" : "ami-1853ac65"},
      "us-west-2"        : { "Amalinux" : "ami-d874e0a0"},
      "us-west-1"        : { "Amalinux" : "ami-bf5540df"},
      "eu-west-1"        : { "Amalinux" : "ami-3bfab942"},
      "eu-west-2"        : { "Amalinux" : "ami-dff017b8"},
      "eu-west-3"        : { "Amalinux" : "ami-4f55e332"},
      "eu-central-1"     : { "Amalinux" : "ami-ac442ac3"},
      "ap-northeast-1"   : { "Amalinux" : "ami-a77c30c"},
      "ap-northeast-2"   : { "Amalinux" : "ami-5e1ab730"},
      "ap-southeast-1"   : { "Amalinux" : "ami-e2adf99e"},
      "ap-southeast-2"   : { "Amalinux" : "ami-43874721"},
      "ap-south-1"       : { "Amalinux" : "ami-7c87d913"},
      "us-east-2"        : { "Amalinux" : "ami-25615740"},
      "ca-central-1"     : { "Amalinux" : "ami-5b55d23f"},
      "sa-east-1"        : { "Amalinux" : "ami-5339733f"}
   }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : "10.0.0.0/16"
   }
  },

    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24"
   }
  },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway"
  },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
   }
  },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" }
   }
  },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
   }
  },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
   }
  },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" }
   }
  },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
   }
  },

    "InboundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
   }
  },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "SSHLocation" },
        "PortRange" : { "From" : "22", "To" : "22" }
   }
  },

    "InboundEphemeralNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
   }
  },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
   }
  },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
   }
  },

    "OutboundEphemeralNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
   }
  },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
   }
  },

    "IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "EC2WebServer" }
   }
  },

    "EC2WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Enable HTTP access via port 80 + SSH access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort": "443", "CidrIp": "0.0.0.0/0"}
      ]
   }
  },
  "EC2WebServer": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "wordpress_install" : ["install_cfn", "install_chefdk", "install_chef", "install_wordpress", "run_chef"]
        },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.EC2WebServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource EC2WebServer ",
                          "         --configsets wordpress_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_chef" : {
            "sources" : {
              "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
            },
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /var/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/var/chef"
              },
              "03_create_node_list" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
              }
            }
          },

          "install_wordpress" : {
            "files" : {
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/cookbooks/wordpress/attributes/default.rb" : {
                "content": { "Fn::Join": [ "", [
                  "node['wordpress']['db']['pass'] = '", {"Ref" : "DBPassword"}, "'\n",
                  "node['wordpress']['db']['user'] = '", {"Ref" : "DBUser"}, "'\n",
                  "node['wordpress']['db']['host'] = '", {"Ref" : "Hostname"}, "'\n",
                  "node['wordpress']['db']['name'] = '", {"Ref" : "DBName"}, "'\n",
                  "node['wordpress']['db']['port'] = '", {"Ref" : "DBPort"}, "'\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_get_cookbook" : {
                "command" : "knife cookbook site download wordpress",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              },
              "02_unpack_cookbook" : {
                "command" : "tar xvfz /var/chef/chef-repo/wordpress*",
                "cwd" : "/var/chef/chef-repo/cookbooks"
              },
              "03_init_berkshelf": {
                "command" : "berks init /var/chef/chef-repo/cookbooks/wordpress --skip-vagrant --skip-git",
                "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
                "env" : { "HOME" : "/var/chef" }
              },
              "04_vendorize_berkshelf" : {
                "command" : "berks vendor",
                "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
                "env" : { "HOME" : "/var/chef" }
              },
              "05_configure_node_run_list" : {
                "command" : "knife node run_list add -z `knife node list -z` recipe[wordpress]",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "run_chef" : {
            "commands" : {
              "01_run_chef_client" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Amalinux"]},
        "InstanceType"   : { "Ref" : "EnvironmentSizeEC2" },
        "KeyName"        : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "EC2WebServerSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "Subnet" }
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",
                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource EC2WebServer ",
                       "         --configsets wordpress_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",
                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource EC2WebServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
         ]]}}
       }
      }
     },
     "Outputs" : {
       "WebsiteURL" : {
         "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "EC2WebServer", "PublicDnsName" ]}, "/wordpress"]]},
         "Description" : "WordPress website"
    }
  }
}
